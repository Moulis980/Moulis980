{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMn1pchU2yGBf/kFHUSIwpO",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Moulis980/Moulis980/blob/main/KMeans%20cluster%20for%20iris%20dataset\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 46,
      "metadata": {
        "id": "XHqNzTdqOvwy"
      },
      "outputs": [],
      "source": [
        "from matplotlib import pyplot as plt\n",
        "import pandas as pd\n",
        "from sklearn.cluster import KMeans"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df=pd.read_csv(\"/content/iris.csv\")\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "ZClGxuGrMjZP",
        "outputId": "c367bc97-bb4b-4d45-df16-5577a65a3837"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   sepal_length  sepal_width  petal_length  petal_width species\n",
              "0           5.1          3.5           1.4          0.2  setosa\n",
              "1           4.9          3.0           1.4          0.2  setosa\n",
              "2           4.7          3.2           1.3          0.2  setosa\n",
              "3           4.6          3.1           1.5          0.2  setosa\n",
              "4           5.0          3.6           1.4          0.2  setosa"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3291c170-6b30-443a-a814-8ddd86054c86\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sepal_length</th>\n",
              "      <th>sepal_width</th>\n",
              "      <th>petal_length</th>\n",
              "      <th>petal_width</th>\n",
              "      <th>species</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5.1</td>\n",
              "      <td>3.5</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4.9</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4.7</td>\n",
              "      <td>3.2</td>\n",
              "      <td>1.3</td>\n",
              "      <td>0.2</td>\n",
              "      <td>setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4.6</td>\n",
              "      <td>3.1</td>\n",
              "      <td>1.5</td>\n",
              "      <td>0.2</td>\n",
              "      <td>setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5.0</td>\n",
              "      <td>3.6</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>setosa</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3291c170-6b30-443a-a814-8ddd86054c86')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3291c170-6b30-443a-a814-8ddd86054c86 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3291c170-6b30-443a-a814-8ddd86054c86');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3e864849-1f13-4a7f-8bbd-3565309a8d6b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3e864849-1f13-4a7f-8bbd-3565309a8d6b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3e864849-1f13-4a7f-8bbd-3565309a8d6b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 150,\n  \"fields\": [\n    {\n      \"column\": \"sepal_length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8280661279778629,\n        \"min\": 4.3,\n        \"max\": 7.9,\n        \"num_unique_values\": 35,\n        \"samples\": [\n          6.2,\n          4.5,\n          5.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sepal_width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4335943113621737,\n        \"min\": 2.0,\n        \"max\": 4.4,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          2.3,\n          4.0,\n          3.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal_length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7644204199522617,\n        \"min\": 1.0,\n        \"max\": 6.9,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          6.7,\n          3.8,\n          3.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal_width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7631607417008414,\n        \"min\": 0.1,\n        \"max\": 2.5,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          0.2,\n          1.2,\n          1.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"species\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"setosa\",\n          \"versicolor\",\n          \"virginica\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df1=df.drop(columns=['species'])\n",
        "df1.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "G3t3495MNAVj",
        "outputId": "939adf1c-4481-45a0-a183-294a054716ab"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   sepal_length  sepal_width  petal_length  petal_width\n",
              "0           5.1          3.5           1.4          0.2\n",
              "1           4.9          3.0           1.4          0.2\n",
              "2           4.7          3.2           1.3          0.2\n",
              "3           4.6          3.1           1.5          0.2\n",
              "4           5.0          3.6           1.4          0.2"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-aaa5b4a2-1bd9-4521-87a2-bc6add981e77\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sepal_length</th>\n",
              "      <th>sepal_width</th>\n",
              "      <th>petal_length</th>\n",
              "      <th>petal_width</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5.1</td>\n",
              "      <td>3.5</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4.9</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4.7</td>\n",
              "      <td>3.2</td>\n",
              "      <td>1.3</td>\n",
              "      <td>0.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4.6</td>\n",
              "      <td>3.1</td>\n",
              "      <td>1.5</td>\n",
              "      <td>0.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5.0</td>\n",
              "      <td>3.6</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-aaa5b4a2-1bd9-4521-87a2-bc6add981e77')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-aaa5b4a2-1bd9-4521-87a2-bc6add981e77 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-aaa5b4a2-1bd9-4521-87a2-bc6add981e77');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-cfa710fe-494b-4d02-be32-95c239a7c30f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cfa710fe-494b-4d02-be32-95c239a7c30f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-cfa710fe-494b-4d02-be32-95c239a7c30f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df1",
              "summary": "{\n  \"name\": \"df1\",\n  \"rows\": 150,\n  \"fields\": [\n    {\n      \"column\": \"sepal_length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8280661279778629,\n        \"min\": 4.3,\n        \"max\": 7.9,\n        \"num_unique_values\": 35,\n        \"samples\": [\n          6.2,\n          4.5,\n          5.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sepal_width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4335943113621737,\n        \"min\": 2.0,\n        \"max\": 4.4,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          2.3,\n          4.0,\n          3.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal_length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7644204199522617,\n        \"min\": 1.0,\n        \"max\": 6.9,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          6.7,\n          3.8,\n          3.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal_width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7631607417008414,\n        \"min\": 0.1,\n        \"max\": 2.5,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          0.2,\n          1.2,\n          1.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "k=KMeans(n_clusters=3)\n",
        "y=k.fit_predict(df1)\n",
        "y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gvoijw3QMwFc",
        "outputId": "2ccece3c-dcbe-47bb-daaa-830da8b78b93"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
              "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
              "       1, 1, 1, 1, 1, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
              "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
              "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2,\n",
              "       2, 2, 2, 0, 0, 2, 2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 0, 0, 2, 2, 2, 2,\n",
              "       2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 0], dtype=int32)"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df1['cluster']=y\n",
        "df1.head()\n",
        "centroids=k.cluster_centers_\n",
        "s1=df1[df1.cluster==0]\n",
        "s2=df1[df1.cluster==1]\n",
        "s3=df1[df1.cluster==2]\n",
        "plt.scatter(s1['sepal_length'],s1['sepal_width'],color=\"red\",label=\"G1\")\n",
        "plt.scatter(s2['sepal_length'],s2['sepal_width'],color=\"green\",label=\"G2\")\n",
        "plt.scatter(s3['sepal_length'],s3['sepal_width'],color=\"blue\",label=\"G3\")\n",
        "plt.scatter(centroids[:,0],centroids[:,1],color=\"black\",s=200,marker=\"*\",label=\"Centroid\")\n",
        "plt.legend(loc=2)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 433
        },
        "id": "uzAChbl5P7oN",
        "outputId": "20e67e3d-18cd-4894-bd3c-a4ecd4242023"
      },
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import MinMaxScaler\n",
        "scaler=MinMaxScaler()\n",
        "scaler.fit(df1[['sepal_length']])\n",
        "df1['sepal_length']=scaler.transform(df1[['sepal_length']])\n",
        "scaler.fit(df1[['sepal_width']])\n",
        "df1['sepal_width']=scaler.transform(df1[['sepal_width']])\n",
        "df1.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "LjGHu5hiSqjQ",
        "outputId": "6258d1ec-a950-4082-e100-5df49c28169d"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   sepal_length  sepal_width  petal_length  petal_width  cluster\n",
              "0      0.222222     0.625000           1.4          0.2        0\n",
              "1      0.166667     0.416667           1.4          0.2        0\n",
              "2      0.111111     0.500000           1.3          0.2        0\n",
              "3      0.083333     0.458333           1.5          0.2        0\n",
              "4      0.194444     0.666667           1.4          0.2        0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-eb2c8e12-4c91-4faf-b244-804f5ce9eb71\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sepal_length</th>\n",
              "      <th>sepal_width</th>\n",
              "      <th>petal_length</th>\n",
              "      <th>petal_width</th>\n",
              "      <th>cluster</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.222222</td>\n",
              "      <td>0.625000</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.166667</td>\n",
              "      <td>0.416667</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.111111</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>1.3</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.083333</td>\n",
              "      <td>0.458333</td>\n",
              "      <td>1.5</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.194444</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eb2c8e12-4c91-4faf-b244-804f5ce9eb71')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-eb2c8e12-4c91-4faf-b244-804f5ce9eb71 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-eb2c8e12-4c91-4faf-b244-804f5ce9eb71');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7bd5e516-20c5-4b5a-b3a2-50123324c6d2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7bd5e516-20c5-4b5a-b3a2-50123324c6d2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7bd5e516-20c5-4b5a-b3a2-50123324c6d2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df1",
              "summary": "{\n  \"name\": \"df1\",\n  \"rows\": 150,\n  \"fields\": [\n    {\n      \"column\": \"sepal_length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.23001836888273966,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 35,\n        \"samples\": [\n          0.5277777777777779,\n          0.05555555555555558,\n          0.36111111111111094\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sepal_width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.18066429640090576,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          0.12499999999999989,\n          0.8333333333333333,\n          0.625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal_length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7644204199522617,\n        \"min\": 1.0,\n        \"max\": 6.9,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          6.7,\n          3.8,\n          3.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal_width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7631607417008414,\n        \"min\": 0.1,\n        \"max\": 2.5,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          0.2,\n          1.2,\n          1.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cluster\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "centroids=k.cluster_centers_\n",
        "centroids=scaler.fit_transform(centroids)\n",
        "centroids"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s8Mku8ItV1pu",
        "outputId": "6bc6b0c0-955a-4aca-d6a0-e6f4c56ad7e5"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.        , 1.        , 0.        , 0.        ],\n",
              "       [1.        , 0.49620581, 1.        , 1.        ],\n",
              "       [0.47493486, 0.        , 0.68789932, 0.65774996]])"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s1=df1[df1.cluster==0]\n",
        "s2=df1[df1.cluster==1]\n",
        "s3=df1[df1.cluster==2]\n",
        "plt.scatter(s1['sepal_length'],s1['sepal_width'],color=\"red\")\n",
        "plt.scatter(s2['sepal_length'],s2['sepal_width'],color=\"green\")\n",
        "plt.scatter(s3['sepal_length'],s3['sepal_width'],color=\"blue\")\n",
        "plt.scatter(centroids[:,0],centroids[:,1],color=\"black\",s=50,marker=\"*\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "55I48MStVWDu",
        "outputId": "d95fad04-6033-4cdc-b990-8cffc355da69"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7ddc676c3d90>"
            ]
          },
          "metadata": {},
          "execution_count": 43
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAiMAAAGdCAYAAADAAnMpAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAPHZJREFUeJzt3X9wVPW9//HXZsMGGAmgaAjsUr5N8cdtFVqVNLQZ6y29OHa4MPlSbe0g0h/eCvSL5jYR/IXWFii0DFwkdS6t1flOFRAi6VQGa2mxWLF+Rbla+aEGLDGSqFUTSoAlm/P9Y5vI5hd7TnbP+Zyzz8dMRnPyOfm8P5/jZt/u+ZzPO2RZliUAAACP5HkdAAAAyG0kIwAAwFMkIwAAwFMkIwAAwFMkIwAAwFMkIwAAwFMkIwAAwFMkIwAAwFP5XgeQjo6ODr3zzjsaNmyYQqGQ1+EAAIA0WJalY8eOacyYMcrL6/vzD18kI++8845isZjXYQAAAAcaGhoUjUb7/LkvkpFhw4ZJSg6msLDQ42gAAEA6WltbFYvFut7H++KLZKTz1kxhYSHJCAAAPnO2JRYsYAUAAJ4iGQEAAJ4iGQEAAJ4iGQEAAJ4iGQEAAJ4iGQEAAJ4iGQEAAJ7K+WTk1KlTXocAAEBOy+lk5JVXXtGIESP0yiuveB0KYE8iIe3cKT32WPKfiYTXEQGAY7aTkT/96U+aPn26xowZo1AopK1bt571nJ07d+pzn/ucCgoK9KlPfUoPP/ywg1Az77HHHtPJkye1YcMGr0MB0ldbK40fL119tXTDDcl/jh+fPA4APmQ7GTl+/LgmTpyodevWpdX+8OHD+upXv6qrr75ae/fu1a233qrvfOc7euqpp2wHm0mWZXUlIRs3bpRlWZ7GA6SltlaaNUt6++3U442NyeMkJAB8KGQN4F04FArpiSee0MyZM/tsc/vtt+vJJ5/UX//6165jX//61/XRRx9p+/btafXT2tqq4cOHq6WlZUC1aZYvX65nnnlGknT69Gnt2LGj62df/vKXNWjQIEnSVVddpUWLFjnuB8iKRCL5CUj3RKRTKCRFo9Lhw1I47GpoANCbdN+/s14ob/fu3Zo6dWrKsWnTpunWW2/t85xTp06lLCxtbW3NSCytra19JkBnJiaf/exnM9IfkFG7dvWdiEiSZUkNDcl2X/qSa2EBwEBlfQFrU1OTioqKUo4VFRWptbVVJ06c6PWcZcuWafjw4V1fsVgsI7EsXbpUmzZt0jnnnKP8/NQ8LD8/X8OGDdPjjz+upUuXZqQ/IKOOHs1sOwAwhJFP0yxevFgtLS1dXw0NDRn73V/72tdUV1en9vb2lOPt7e2qq6vTrFmzMtYXkFHFxZltBwCGyHoyMnr0aDU3N6cca25uVmFhoYYMGdLrOQUFBSosLEz5yqTdu3dLkvLy8lL+2XkcMFJ5eXJNSCjU+89DISkWS7YDAB/JejJSVlaWsh5Dkp5++mmVlZVlu+s+bdy4UZJ0/vnn64EHHtD555+fchwwUjgsrVmT/PfuCUnn96tXs3gVgO/YTkb+8Y9/aO/evdq7d6+k5KO7e/fu1ZEjRyQlb7HceOONXe2/973v6dChQ6qurtaBAwdUU1OjTZs26bbbbsvMCGxqb2/XgQMHNH36dL322muaP3++XnvtNU2fPl0HDhzocfsGMEpFhbR5szR2bOrxaDR5vKLCm7gAYABsP9q7c+dOXX311T2Oz5kzRw8//LBuuukmvfXWW9q5c2fKObfddpv27dunaDSqu+++WzfddFPafWbq0d5OH3zwgUaOHKnQGf93aVmWPvzwQ5177rkD/v1A1iUSyadmjh5NrhEpL+cTEQDGSff9e0D7jLgl08kIAADIvnTfv418mgYAAOQOkhEAAOApkhEAAOApkhEAAOApkhEAAOApkhEAAOApkhEAAOApkhEAAOApkhEAAOApkhEAAOApkhEAAOApkhEAAOApkhEAAOApkhEAAOApkhEAAOApkhEAAOCpfK8DAAInkZB27ZKOHpWKi6Xycikc9joqADAWyQiQSbW10sKF0ttvf3wsGpXWrJEqKryLCwAMxm0aIFNqa6VZs1ITEUlqbEwer631Ji4AMBzJCJAJiUTyExHL6vmzzmO33ppsBwBIQTICZMKuXT0/ETmTZUkNDcl2AIAUJCNAJhw9mtl2AJBDSEaATCguzmw7AMghJCNAJpSXJ5+aCYV6/3koJMViyXYAgBQkI0AmhMPJx3elnglJ5/erV7PfCAD0gmQEyJSKCmnzZmns2NTj0WjyOPuMAECv2PQMyKSKCmnGDHZgBQAbSEaATAuHpS99yesoAMA3uE0DAAA8RTICAAA8xW0a+BfVcQEgEEhG4E9UxwWAwOA2DfyH6rgAECgkI/AXquMCQOCQjMBfqI4LAIFDMgJ/oTouAAQOyQj8heq4ABA4JCPwF6rjAkDgkIzAX6iOCwCBQzIC/6E6LgAECpuewZ+ojgsAgUEyAv+iOi4ABAK3aQAAgKdIRgAAgKe4TQPkAiocAzAYyQgQdFQ4BmA4btMAQUaFYwA+QDICBBUVjgH4BMkIEFRUOAbgEyQjQFBR4RiAT5CMAEFFhWMAPkEyAgQVFY4B+ATJCBBUVDgG4BMkI0CQUeEYgA+w6RkQdFQ4BmA4khEgF1DhGIDBuE0DAAA85SgZWbduncaPH6/BgwertLRUL7zwQr/tV69erYsuukhDhgxRLBbTbbfdppMnTzoKGAAABIvt2zQbN25UZWWlHnzwQZWWlmr16tWaNm2aDh48qAsuuKBH+0cffVSLFi3SQw89pClTpuj111/XTTfdpFAopFWrVmVkEEDWxONSTY1UXy+VlEjz5kmRiNdRAUCghCyrt8IVfSstLdWVV16pBx54QJLU0dGhWCym73//+1q0aFGP9gsWLND+/fu1Y8eOrmP/+Z//qb/85S969tln0+qztbVVw4cPV0tLiwoLC+2ECzhXXS2tWpVauyUcliorpRUrvIsLAHwi3fdvW7dp4vG49uzZo6lTp378C/LyNHXqVO3evbvXc6ZMmaI9e/Z03co5dOiQtm3bpmuvvbbPfk6dOqXW1taUL8BV1dXSypU9i8glEsnj1dXexAUAAWQrGXn//feVSCRUVFSUcryoqEhNTU29nnPDDTfohz/8ob74xS9q0KBBKikp0Ze+9CXdcccdffazbNkyDR8+vOsrFovZCRMYmHg8+YlIf1atSrYDAAxY1p+m2blzp5YuXaqamhq99NJLqq2t1ZNPPqn777+/z3MWL16slpaWrq+GhoZshwl8rKam5yci3SUSyXYAgAGztYB11KhRCofDam5uTjne3Nys0aNH93rO3XffrdmzZ+s73/mOJOnSSy/V8ePHdfPNN+vOO+9UXl7PfKigoEAFBQV2QgMyp74+s+0AAP2y9clIJBLR5ZdfnrIYtaOjQzt27FBZWVmv57S1tfVIOML/3PnR5tpZwB0lJZltBwDol+3bNJWVlVq/fr0eeeQR7d+/X7fccouOHz+uuXPnSpJuvPFGLV68uKv99OnT9fOf/1wbNmzQ4cOH9fTTT+vuu+/W9OnTu5ISwCjz5p19q/RwONkOADBgtvcZuf766/Xee+/pnnvuUVNTkyZNmqTt27d3LWo9cuRIyichd911l0KhkO666y41Njbq/PPP1/Tp0/XjH/84c6MAMikSST6+u3Jl320qK9lvBAAyxPY+I15gnxF4gn1GAGBA0n3/JhkB+sMOrADgWLrv31TtBfoTiUi33up1FAAQaFTtBQAAniIZAQAAnuI2Dcxw4oRUVSW98YY0YULySZYhQ7yOylyJhLRrl3T0qFRcLJWXn/1xZAC+kuhIaNeRXTp67KiKhxWrfFy5wnmZfZ270Uc6WMAK782cKdXV9Tw+Y4a0davb0ZivtlZauFB6++2Pj0Wj0po1UkWFd3EByJja/bVauH2h3m79+HUeLYxqzTVrVHFJZl7nbvTB0zTwh74SkU4kJKlqa6VZs6TuL9tQKPnPzZtJSACfq91fq1mbZslS6us8pOTrfPN1mwecLLjRh0QyAj84cUIaOvTs7drauGUjJW/NjB+f+onImUKh5Cckhw9zywbwqURHQuPXjE/5tOJMIYUULYzq8MLDjm+nuNFHp3Tfv1nACu9UVWW2XdDt2tV3IiIlPy1paEi2A+BLu47s6jNJkCRLlhpaG7TriPPXuRt92EUyAu+88UZm2wXd0aOZbQfAOEePpff6TbedV33YRTIC70yYkNl2QVdcnNl2AIxTPCy912+67bzqwy7WjMA7rBmxp3PNSGNjzwWsEmtGgADoXM/R2NrYY3GplNk1I9nsoxNrRmC+IUOST8v0Z8YMEpFO4XDy8V3p46dnOnV+v3o1iQjgY+G8sNZck3yddz7Z0qnz+9XXrB5QkuBGH3aRjMBbW7f2nZDwWG9PFRXJx3fHjk09Ho3yWC8QEBWXVGjzdZs1tjD1dR4tjGbskVs3+rCD2zQwAzuw2sMOrEDgBWEHVvYZAQAAnmLNCAAA8AWSEQAA4Cmq9sIMbq2BsNsPazMAIOtIRuA9t6rQ2u2H6rgA4Apu08BbnVVou9dcaWxMHq+t9aYft+ICAPA0DTzkVhVau/1QHRcAMoKnaWA+t6rQ2u2H6rgA4CqSEXjHrSq0dvuhOi4AuIpkBN5xqwqt3X6ojgsAriIZgXfKy5NrL7oXfesUCkmxWLKdm/24FRcAQBLJCLzkVhVau/1QHRcAXEUyAm+5VYXWbj9UxwUA1/BoL8zADqwAEDhU7QUAAJ5inxEAAOALJCMAAMBTFMozTVDWKARlHAA8lehIaNeRXTp67KiKhxWrfFy5wnn8LQkakhGTBKVKbFDGAcBTtftrtXD7Qr3d+vHfkmhhVGuuWaOKS/hbEiTcpjFFUKrEBmUcADxVu79WszbNSklEJKmxtVGzNs1S7X7+lgQJT9OYIChVYoMyDgCeSnQkNH7N+B6JSKeQQooWRnV44WFu2RiOp2n8JChVYoMyDgCe2nVkV5+JiCRZstTQ2qBdR/hbEhQkIyYISpXYoIwDgKeOHkvvb0S67WA+khETBKVKbFDGAcBTxcPS+xuRbjuYj2TEBEGpEhuUcQDwVPm4ckULowqp978lIYUUK4ypfBx/S4KCZMQEQakSG5RxAPBUOC+sNdck/5Z0T0g6v199zWoWrwYIyYgpglIlNijjAOCpiksqtPm6zRpbmPq3JFoY1ebrNrPPSMDwaK9pgrJzaVDGAcBT7MDqb1TtBQAAnmKfEQAA4AskIwAAwFMUykN2xONSTY1UXy+VlEjz5kmRSObaS+auSzE1LgAwFGtGkHnV1dKqVck35U7hsFRZKa1YMfD2krmVgU2NCwA8wJoReKO6Wlq5MjWxkJLfr1yZ/PlA2kvmVgY2NS4AMByfjCBz4nFp6NCeicWZwmGprS15C8Zue8ncysCmxgUAHuKTEbivpqb/xEJK/rymxll7ydzKwKbGBQA+QDKCzKmvt9fObnvJ3MrApsYFAD5AMoLMKSmx185ue8ncysCmxgUAPsCaEWSOm2tGGhuTtz6683rNiGlxAYCHWDMC90Uiycdx+1NZ+XFiYbe9ZG5lYFPjAgAfIBlBZq1YIVVV9XzTDYeTx7vvG2K3vWRuZWBT4wIAwzm6TbNu3TqtXLlSTU1NmjhxotauXavJkyf32f6jjz7SnXfeqdraWn3wwQf6xCc+odWrV+vaa69Nqz9u0/gQO7CaFxcAuCxrVXs3btyoG2+8UQ8++KBKS0u1evVqPf744zp48KAuuOCCHu3j8bi+8IUv6IILLtAdd9yhsWPH6m9/+5tGjBihiRMnZnQwAADAHFlLRkpLS3XllVfqgQcekCR1dHQoFovp+9//vhYtWtSj/YMPPqiVK1fqwIEDGjRokM1hJJGMAADgP1lZwBqPx7Vnzx5NnTr141+Ql6epU6dq9+7dvZ7zm9/8RmVlZZo/f76Kior0mc98RkuXLlWinycoTp06pdbW1pQvAAAQTLaq9r7//vtKJBIqKipKOV5UVKQDBw70es6hQ4f0hz/8Qd/85je1bds2vfnmm5o3b55Onz6tJUuW9HrOsmXLdN9999kJLTjcWG/gZH1GtvtwMu6gzFVAuHE5Eh0J7TqyS0ePHVXxsGKVjytXOK//TpycA8Bllg2NjY2WJOu5555LOV5VVWVNnjy513MmTJhgxWIxq729vevYz372M2v06NF99nPy5EmrpaWl66uhocGSZLW0tNgJ13+2bLGsaNSykjtVJL+i0eTxTKmqsqxwOLWPcDh53Ks+nIw7KHMVEG5cji37tljRVVFL96rrK7oqam3Z13cnTs4BkDktLS1pvX/buk0zatQohcNhNTc3pxxvbm7W6NGjez2nuLhYF154ocJn/C/SJZdcoqamJsXj8V7PKSgoUGFhYcpX4LlR8dVJhdxs9+Fk3EGZq4Bw43LU7q/VrE2z9HZraieNrY2atWmWavf37MTJOQC84WgB6+TJk7V27VpJyQWs48aN04IFC3pdwHrHHXfo0Ucf1aFDh5SXl8x91qxZo5/85Cd655130uoz8AtY3aj46mS302z34WTcQZmrgHDjciQ6Ehq/ZnyPpKKrD4UULYzq8MLDXbdfnJwDIPOytgNrZWWl1q9fr0ceeUT79+/XLbfcouPHj2vu3LmSpBtvvFGLFy/uan/LLbfogw8+0MKFC/X666/rySef1NKlSzV//nwHwwooNyq+OqmQm+0+nIw7KHMVEG5cjl1HdvWZVEiSJUsNrQ3adWTXgM4B4B1bC1gl6frrr9d7772ne+65R01NTZo0aZK2b9/etaj1yJEjXZ+ASFIsFtNTTz2l2267TZdddpnGjh2rhQsX6vbbb8/cKPzOjYqvTirkZrsPJ+MOylwFhBuX4+ix9E4+s52TcwB4x3YyIkkLFizQggULev3Zzp07exwrKyvT888/76Sr3OBGxVcnFXKz3YeTcQdlrgLCjctRPCy9k89s5+QcAN6haq8J3Kj4avKaETvjDspcBYQbl6Nz/Udja6Ms9eykvzUjds4BkHlU7fUTNyq+OqmQm+0+nIw7KHMVEG5cjnBeWGuuSXYSUmonnd+vvmZ1SlLh5BwAHnLhMeMBS/c5Zd/rbbOGWMx/e2dkYp+Rs407KHMVEG5cjt72DImtitneZ+Rs5wDInHTfv7lNY5qg7CrKDqw5hx1YAXSXtUJ5XsipZAQAgIBgzQgAAPAFkhEAAOApR/uMAGdldwGBGwsOkJPipxOq2fKq6v/WppJPDNW8/32pIoP8999WvD2umhdrVP9BvUrOLdG8K+Ypks/6JQQDa0aQebW10sKFqfuER6PJZ0ArKgbeHkhT9X89r1X3jFOiZUzXsfDwd1T5wyNa8X8+72Fk9lQ/Xa1Vu1cpYX289004FFZlWaVWfGWFh5EB/WPNCLxht4SrGyVfkZOq/+t5rVw4WYmW1IriiZbRWrlwsqr/yx+7Qlc/Xa2Vz61MSUQkKWEltPK5lap+mgrS8D8+GUHm2C3h6kbJV+Sk+OmEhp7f/M9EpLf/5+pQeMRRtb072uhbNvH2uIYuHdojETlTOBRW2x1t3LKBkfhkBO6zW8LVjZKvyEk1W179562Zvv7E5Snx0VjVbHnVzbBsq3mxpt9EREp+QlLzIhWk4W8kI8gcuyVc3Sj5ipxU/7e2jLbzSv0H6VWGTrcdYCqSEWSO3RKubpR8RU4q+cTQjLbzSsm56VWGTrcdYCrWjCBz7JZwdaPkK3ISa0YAM7BmBO6zW8LVjZKvyEmRQWFV/vDIP7/r6PbT5PeV9zUYnYhIUiQ/osqy/itIV5ZVkojA90hGkFkVFdLmzdLYsanHo9Hk8e77hthtD6Rpxf/5vKrWvKDw8KaU4+ERR1W15gXf7DOy4isrVDWlSuFQauIUDoVVNaWKfUYQCNymQXawAysMwQ6sgHeo2gsAADzFmhEAAOALJCMAAMBTVO21w411DXb7iMelmhqpvl4qKZHmzZMiBtxHZg2I7+XqJXSyxiTRkdCuI7t09NhRFQ8rVvm4coXzvJ0sJzHZPceNcZs4t8gCywdaWlosSVZLS4t3QWzZYlnRqGUld8RIfkWjyeNe9VFVZVnhcGr7cDh53EtuzBWyKlcvYdWa3VZ4eGPqS2p4o1W1Znef52zZt8WKropaulddX9FVUWvLPu8my0lMds9xY9wmzm1QnTx5Miu/N933bxawpqOzsmz3qercCyMTj6Da7aO6Wlq5su/fV1UlrfDgkT835gpZlauXsLPKb9KZd7CT+5L09jhw7f5azdo0S5ZSJyuk5GRtvm6zKi5xd7KcxGT3HDfGbeLcBtUrr7yi0tJS/eUvf9Fll12W0d/N0zSZ4kZlWbt9xOPS0KHJ8/oSDkttbe7esqEKr+/l6iV0smNroiOh8WvG6+3W3icrpJCihVEdXnjYtdsKTmKye44b4zZxboNs8eLFWr58uRYvXqylS5dm9HfzNE2muFFZ1m4fNTX9JyJS8uc1LlfypAqv7+XqJXRS5XfXkV19vllKkiVLDa0N2nXEvclyEpPdc9wYt4lzG1SWZWnDhg2SpI0bN8qrzydYwHo2blSWtdtHfZoVOtNtlylU4fW9XL2ETqr8Hj2W3iSk2y4TnMRk9xw3xm3i3AbJ8uXL9cwzz0iSTp8+rbfeekuSdOjQIX3lK1/RoEGDJElXXXWVFi1a5EpMJCNn40ZlWbt9lKRZoTPddplCFV7fy9VL6KTKb/Gw9CYh3XaZ4CQmu+e4MW4T5zZIWltbtX379l5/tmPHjq5//+xnP+tWSKwZOSs3Ksva7cP0NSNU4fWtXL2EA1kz0tja2GORpeTtmhE7Mdk9x41xmzi3QfP444/rW9/6lk6ePKn29vau4/n5+RoyZIgeeughzZo1a8D9sGYkU9yoLGu3j0hEquy/kqcqK93fb4QqvL6Xq5fQSZXfcF5Ya65JTlbnEx6dOr9ffc1qV98sncRk9xw3xm3i3AbN1772NdXV1aUkIpLU3t6uurq6jCQidpCMpMONyrJ2+1ixIvn4bvd3hXDYu8d6JarwBkCuXkInVX4rLqnQ5us2a2xh6mRFC6OePXrqJCa757gxbhPnNmh2794tScrLy0v5Z+dxN3Gbxg52YE1frm7fGSC5egnZgZUdWHPFZZddpldffVVFRUW6++67df/996u5uVmXXXaZ/ud//icjfbDPCAAA6FV7e7uGDh2qa665Rr/61a903nnn6e9//7vmzp2rp556SsePH1d+/sCfcUn3/ZunaQAAyDH5+flqamrSyJEjFfrngrDzzjtPdXV1+vDDDzOSiNiKx9XeAACAEc4999wex0KhUK/Hs41kxDQmrks5cSK5KPaNN6QJE5I1cYYMyWxMgCFMXaNw4mRCVUsP6403OjRhQp5W3vG/NGRwZuM6ET+hqt9X6Y2/v6EJ503QyqkrNSTCax3Zx5oRk9TWSgsXpu7HHY0mn7XM1CMMdvuYOVOqq+t5fMYMaevWzMQEGKJ2f60Wbl+YshV5tDCqNdes8fTpjZnfPqi6X31Kss5IPkIJzZj7prb+8qLM9LFhpuoO9nytz7hohrZ+fWtG+kDuYZ8Rv+ksldq9MEhjY/J4ba37ffSViEjJ4zNnDjwmwBCdVWK710RpbG3UrE2zVLs/A69BB2Z++6DqHrpQsrr9ubbyVPfQhZr57YMD76OPRESS6g7WaeaGmQPuA+gPn4yYwMTKwCdOJHd5PZu2Nm7ZwPdMrRJ74mQi+TK08qRum38lWVIooba2kONbNifiJzR02dlf622L27hlA9v4ZMRPTKwMXFWV3u9Ntx1gMFOrxFYtPfzPWzO9JSJKHrfyk+2c9vH79F7D6bYDnCAZMYGJlYHfeCO99um2AwxmapXYN97ovjX9wNr1eu7f03sNp9sOcIJkxAQmVgaeMCG99um2AwxmapXYCRPS+xOdbrtezz0vvddwuu0AJ1gzYgITKwOzZgQ5xNQqsawZgd+xZsRPTKwMPGRI8vHd/syYQSKCQDC1SuyQwWHNmPvmP7/rniQlv58xt35A+40MiQzRjIv6f63PuGgGiQiyimTEFCZWBt66te+EhH1GEDCmVond+suLNONbr0uhbutCQgnN+NbrGdlnZOvXt/aZkLDPCNzAbRrTsAMr4Cl2YGUHVmQOVXsBAICnWDMCAAB8gWQEAAB4Kner9jpZm+HGeg43xONSTY1UXy+VlEjz5kmRSN/tc3iu3BiG3cthalxOYnIydhPZXWvhaK7a46p5sUb1H9Sr5NwSzbtiniL5fU+WqWtf7MZl6jicyOWxn5XlAy0tLZYkq6WlJTO/cMsWy4pGLSu540byKxpNHs/kOSaqqrKscDh1HOFw8nhvcniu3BiG3cthalxOYnIydhPNeGyGpXvV42vGYzN6be9orn5XZYXvC6f8/vB9Yavqd71P1pZ9W6zoqmhK++iqqLVln7evQbtxmToOJ3J17Om+f+deMrJli2WFQql/CaTksVCo978ITs4xUVVVzzGc+dX9XSCH58qNYdi9HKbG5SQmJ2M3UV+JSF8JiaO5+l1Vv310T0i27Ntihe4N9WgXujdkhe4NefZmZjcuU8fhRC6PPd3379x6msZJdVw3Kuq6IR5P7qiaSPTdJhxO7qgaieT0XLkxDLuXw9S4nMTkZOwmsrtzqaO5ao9r6NKhSlh9T1Y4FFbbHW2K5EeMrT5sNy5Tx+FELo9d4mma3jmpjutGRV031NT0/9dfSv68pib57zk8V24Mw+7lMDUuJzE5GbuJ7Fa7dTRXL9b0m4hIUsJKqObF5GSZWn3YblymjsOJXB67HbmVjDipjutGRV031Nfba5fDc+XGMOxeDjv9uRmXk5icjN1EdqvdOpqrD9KbhM52plYfthuXqeNwIpfHbkduJSNOquO6UVHXDSUl9trl8Fy5MQy7l8NOf27G5SQmJ2M3kd1qt47m6tz0JqGznanVh+3GZeo4nMjlsdvhaM3IunXrtHLlSjU1NWnixIlau3atJk+efNbzNmzYoG984xuaMWOGttqoa5LxNSN2quO6UVHXDU4XA+TgXLkxjIGsGTEpLicx5fqaEVtz5XDNiGnVh+3GZeo4nMjlsUtZXDOyceNGVVZWasmSJXrppZc0ceJETZs2Te+++26/57311lv6wQ9+oPLycrtdZo6T6rhuVNR1QyQiVVb236ay8uO//jk8V24Mw+7lMDUuJzE5GbuJ7Fa7dTRX+RFVlvU/WZVllV37jZhafdhuXKaOw4lcHrstdh/TmTx5sjV//vyu7xOJhDVmzBhr2bJlfZ7T3t5uTZkyxfrFL35hzZkzx5oxY4atPl3ZZyQWs793xtnOMVEmNpDIkblyYxiZ2mfE67icxMQ+IzbmKgP7jMRWxTx/JNRuXKaOw4lcHXtWHu2Nx+MaOnSoNm/erJkzZ3YdnzNnjj766CPV1dX1et6SJUv0yiuv6IknntBNN92kjz76qN/bNKdOndKpU6e6vm9tbVUsFstsobwc3lWUHVjTZ+JOp6bGxQ6s7MCajlzehTQXx56Vqr3vvPOOxo4dq+eee05lZWVdx6urq/XMM8/oL3/5S49znn32WX3961/X3r17NWrUqLSSkXvvvVf33Xdfj+NU7QUAwD+M2Gfk2LFjmj17ttavX69Ro0alfd7ixYvV0tLS9dXQ0JDFKAEAgJdsFcobNWqUwuGwmpubU443Nzdr9OjRPdrX19frrbfe0vTp07uOdXR0JDvOz9fBgwdV0svzewUFBSooKLATGgAA8ClbyUgkEtHll1+uHTt2dK0Z6ejo0I4dO7RgwYIe7S+++GK9+uqrKcfuuusuHTt2TGvWrFEsFnMeuRcCsg4CZgnKkhw3xuGoD7v36V2YWxOvX5AEYa1FzrG7MnbDhg1WQUGB9fDDD1v79u2zbr75ZmvEiBFWU1OTZVmWNXv2bGvRokV9nm/E0zROBKQSLcwSlKLIbozDUR92K6W6MLcmXr8gCUq126DIatXetWvXWuPGjbMikYg1efJk6/nnn+/62VVXXWXNmTOnz3N9mYwEpBItzBKUoshujMNRH3YrpbowtyZevyAJUrXboKBqb6YEpBItzBKUoshujMNRH3YrpbowtyZevyAJWrXboDDiaZpACEglWpglKEWR3RiHoz7sVkp1YW5NvH5BkqvVboOCZORsAlKJFmYJSlFkN8bhqA+7lVJdmFsTr1+Q5Gq126AgGTmbgFSihVmCUhTZjXE46sNupVQX5tbE6xckuVrtNihYM3I2AalEC7MEpSiyG+Nw1IfdSqkuzK2J1y9IglbtNihYM5IpAalEC7MEpSiyG+Nw1IfdSqkuzK2J1y9IcrbabVC48GTPgHn+aK9lBaYSLcwSlKLIbozDUR92K6W6MLcmXr8gCUq126Dg0d5sYNtEZAE7sLIDqwnXL0jYgdUcWana6xVjkhEAAJA21owAAABfIBkBAACeslW1F0DmOVk/EI9LNTVSfb1UUiLNmydFIpntww1ujMPuOfH2uGperFH9B/UqObdE866Yp0h+P0E5jCvbTIzJZCauMzExpqxxYTHtgBnxNA2QBU4quFZVWVY4nHpOOJw8nqk+3ODGOOyeU/W7Kit8XzjlSYzwfWGr6nd9BOUwrmwzMSaTmVjp18SYnMhq1V63kYwgiJxUcK2q6tn+zK/ub+SmVol1Yxx2z6n6XVWPaq9nfvWWkJg4vybGZDITK/2aGJNTPNoLGMxJBdd4XBo6NHluX8Jhqa0teavD1CqxbozD7jnx9riGLh2qhNV3UOFQWG13tHXdsjFxfk2MyWQmVvo1MaaB4GkawGBOKrjW1PT/Bi4lf15T47wPN7gxDrvn1LxY028iIkkJK6GaF2sc9+EGE2MymYmVfk2MyQ0kI4AHnFRwra9P75zOdqZWiXVjHHbPqf8gvaDObGfi/JoYk8lMrPRrYkxuIBkBPOCkgmtJSXrndLYztUqsG+Owe07JuekFdWY7E+fXxJhMZmKlXxNjcgNrRgAPOKng6nSthWlVYt0Yh91zBrJmxKT5NTEmk5lY6dfEmAaCNSOAwZxUcI1EpMrK/n9vZeXH+3SYWiXWjXHYPSeSH1FlWf9BVZZVpuw3YuL8mhiTyUys9GtiTK5w4cmeAePRXgSVkwqumdifw4QqsW6Mw+45mdpnxOv5NTEmk5lY6dfEmJzg0V7AJ9iBlR1Ys8HEmExm4m6nJsZkF1V7AQCAp1gzAgAAfIFkBAAAeIqqvfCtoNwTd2Mc//iHNHv2x2sz/u//lc45J7N9mHo97MYVhPv0gN+QjMCXamulhQtTt76ORpOPNVZUeBeXXW6MY/Jk6f/9v4+/f/VVadgw6corpRdeyEwfpl4Pu3HV7q/Vwu0LU7bjjhZGteaaNaq4xEf/YQE+wwJW+E5trTRrVs9NnTr3Udi82R8JiRvj6J6IdJeJhMTU62E3rtr9tZq1aVaPjaY693bYfN1mEhLAJp6mQSAFpSqpG+P4xz+Sn4CczbFjzm/ZmHo97MYVtEqpgCl4mgaBFJSqpG6MY/bszLbrjanXw25cuVopFTAFyQh8JShVSd0Yh93quE6Yej3sxpWrlVIBU5CMwFeCUpXUjXHYrY7rhKnXw25cuVopFTAFa0bgK0GpSurGONxcM2La9bAbV9AqpQKmYM0IAikoVUndGMc55ySflunPlVcObL8RU6+H3bhytlIqYAiSEfhORUXyscyxY1OPR6P+eaxXcmccL7zQd0KSqX1GTL0eduOquKRCm6/brLGFqSdEC6M81gtkGbdp4Fum7vhpFzuwZhc7sALeYZ8RAADgKdaMAAAAXyAZAQAAnqJQHpBhbqydsL0OwtT1HKzPAPqUS68PkhEgg9yoXmu7Eq2pFXWpkAv0KddeHyxgBTLEjeq1tivRmlpRlwq5QJ+C9PrgaRrARW5Ur7VdidbUirpUyAX6FLTXB0/TAC5yo3qt7Uq0plbUpUIu0KdcfX2QjAAZ4Eb1WtuVaE2tqEuFXKBPufr6IBkBMsCN6rW2K9GaWlGXCrlAn3L19UEyAmRAeXly/UX3omydQiEpFku2c6sPN2JyonxcuaKF0R4F6briUkixwpjKx7kcGGCAXH19kIwAGeBG9VrblWhNrahLhVygT7n6+iAZATLEjeq1tivRmlpRlwq5QJ9y8fXBo71AhrEDa/pyaYdJwK4gvD7YZwQAAHiKfUYAAIAvkIwAAABPUSgPZ2XiGgiTubGeI0jzlW3xuFRTI9XXSyUl0rx5UiTidVT2BWH9ANAnywdaWlosSVZLS4vXoeScLVssKxq1rOTm4cmvaDR53E99uMXuWJyMPUjzlW1VVZYVDqfOVTicPO4nW/ZtsaKropbuVddXdFXU2rKPiw6zpfv+zQJW9MnEKrQmc6OibpDmK9uqq6WVK/v+eVWVtGKFe/E4FaQKrsg9PE2DATGxCq3J3KioG6T5yrZ4XBo6NDlnfQmHpbY2s2/ZBK2CK3JPVp+mWbduncaPH6/BgwertLRUL7zwQp9t169fr/Lyco0cOVIjR47U1KlT+20PM5hYhdZkblTUDdJ8ZVtNTf+JiJT8eU2NO/E4lasVXJF7bCcjGzduVGVlpZYsWaKXXnpJEydO1LRp0/Tuu+/22n7nzp36xje+oT/+8Y/avXu3YrGY/u3f/k2NjY0DDh7ZY2IVWpO5UVE3SPOVbfX1mW3nlVyt4IrcYzsZWbVqlb773e9q7ty5+pd/+Rc9+OCDGjp0qB566KFe2//617/WvHnzNGnSJF188cX6xS9+oY6ODu3YsWPAwSN7TKxCazI3KuoGab6yraQks+28kqsVXJF7bCUj8Xhce/bs0dSpUz/+BXl5mjp1qnbv3p3W72hra9Pp06d17rnn9tnm1KlTam1tTfmCu0ysQmsyNyrqBmm+sm3evLOvmwmHk+1MlqsVXJF7bCUj77//vhKJhIqKilKOFxUVqampKa3fcfvtt2vMmDEpCU13y5Yt0/Dhw7u+YrGYnTCRASZWoTWZGxV1gzRf2RaJSJWV/beprDR78aqUuxVckXtc3YF1+fLl2rBhg5544gkNHjy4z3aLFy9WS0tL11dDQ4OLUaKTiVVoTeZGRd0gzVe2rViRfHy3e3IWDvvnsV4pNyu4IvfYerQ3Ho9r6NCh2rx5s2bOnNl1fM6cOfroo49UV1fX57k//elP9aMf/Ui///3vdcUVV9gKkkd7vcUOrPawA6tZ2IEV8E7W9hkpLS3V5MmTtXbtWklSR0eHxo0bpwULFmjRokW9nrNixQr9+Mc/1lNPPaXPf/7zdrqTRDICAIAfpfv+bbs2TWVlpebMmaMrrrhCkydP1urVq3X8+HHNnTtXknTjjTdq7NixWrZsmSTpJz/5ie655x49+uijGj9+fNfaknPOOUfnnHOOk7EBAIAAsZ2MXH/99Xrvvfd0zz33qKmpSZMmTdL27du7FrUeOXJEeXkfL0X5+c9/rng8rlmzZqX8niVLlujee+8dWPQAAMD32A4eZ8X6BHuCskYBAAYqa7dpkFtqa6WFC1O3IY9Gk4+Y8uRGT9XV0qpVqVuR/+AHycdI/fL0BgC4zdVHe+EvnRViu9dDaWxMHq+t9SYuU3VWie1eEyWRSB6vrvYmLgAwHbdp0CsqxNoTlCqxAJBJWa3ai+CjQqw9QakSCwBeIBlBr6gQa09QqsQCgBdIRtArKsTaE5QqsQDgBdaMoFeda0YaG5O3ZLpjzUgq1owAQE+sGcGAUCHWnqBUiQUAL5CMoE9UiLUnKFViAcBt3KbBWbEDqz3swAoASVmr2usFkhEAAPyHNSMAAMAXSEYAAICnKJSXTTm82CKHh57TYzcR1wMwH8lItuRwudscHnpOj91EXA/AH1jAmg2d5W67T23nBh0Bfi42h4ee02M3EdcD8B5P03glh8vd5vDQc3rsJuJ6AGbgaRqv5HC52xweek6P3URcD8BfSEYyLYfL3ebw0HN67CbiegD+QjKSaTlc7jaHh57TYzcR1wPwF9aMZFoOl7vN4aHn9NhNxPUAzMCaEa/kcLnbHB56To/dRFwPwF9IRrIhh8vd5vDQc3rsJuJ6AP7BbZpsyuGtH3N46Dk9dhNxPQDvsM8IAADwFGtGAACAL5CMAAAAT1EoD0BGxONSTY1UXy+VlEjz5kmRSGb7YP0HEEwkIwAGrLpaWrUqmSx0+sEPpMpKacWKzPRBBV4guLhNA2BAqqullStTExEp+f3KlcmfD1RnBd7u9WYaG5PHa2sH3gcA7/A0DQDH4nFp6NCeiciZwmGprc35LRsq8AL+xdM0ALKupqb/RERK/rymxnkfVOAFgo9kBIBj9fWZbdcbKvACwUcyAsCxkpLMtusNFXiB4GPNCADH3FwzQgVewH9YMwIg6yKR5OO7/amsHNh+I1TgBYKPZATAgKxYIVVV9UwGwuHk8UzsM0IFXiDYuE0DICPYgRVAd1TtBQAAnmLNCAAA8AWSEQAA4CmSEQAA4CmSEQAA4CmSEQAA4CmSEQAA4CmSEQAA4CmSEQAA4CmSEQAA4CmSEQAA4CmSEQAA4CmSEQAA4CmSEQAA4CmSEQAA4CmSEQAA4CmSEQAZd+rUKa9DAOAjJCPIikRC2rlTeuyx5D8TCa8jglteeeUVjRgxQq+88orXoQDwCUfJyLp16zR+/HgNHjxYpaWleuGFF/pt//jjj+viiy/W4MGDdemll2rbtm2OgoU/1NZK48dLV18t3XBD8p/jxyePI/gee+wxnTx5Uhs2bPA6FAA+YTsZ2bhxoyorK7VkyRK99NJLmjhxoqZNm6Z333231/bPPfecvvGNb+jb3/62Xn75Zc2cOVMzZ87UX//61wEHD/PU1kqzZklvv516vLExeZyEJNgsy+pKQjZu3CjLsjyOCIAfhCybfy1KS0t15ZVX6oEHHpAkdXR0KBaL6fvf/74WLVrUo/3111+v48eP67e//W3Xsc9//vOaNGmSHnzwwbT6bG1t1fDhw9XS0qLCwkI74cJFiUTyE5DuiUinUEiKRqXDh6Vw2NXQkEXLly/XM888I0k6ffq0duzY0fWzL3/5yxo0aJAk6aqrrur1bwSA4Er3/Tvfzi+Nx+Pas2ePFi9e3HUsLy9PU6dO1e7du3s9Z/fu3aqsrEw5Nm3aNG3durXPfk6dOpWyAK61tdVOmPDIrl19JyKSZFlSQ0Oy3Ze+5FpYyLLW1lZt376915+dmZh89rOfdSskAD5j6zbN+++/r0QioaKiopTjRUVFampq6vWcpqYmW+0ladmyZRo+fHjXVywWsxMmPHL0aGbbwR+WLl2qTZs26ZxzzlF+fur/3+Tn52vYsGF6/PHHtXTpUo8iBGA6I5+mWbx4sVpaWrq+GhoavA4JaSguzmw7+MfXvvY11dXVqb29PeV4e3u76urqNGvWLI8iA+AHtpKRUaNGKRwOq7m5OeV4c3OzRo8e3es5o0ePttVekgoKClRYWJjyBfOVlyfXhIRCvf88FJJisWQ7BE/nrdq8vLyUf/Z1CxcAOtlKRiKRiC6//PKU+8AdHR3asWOHysrKej2nrKwspb0kPf300322h3+Fw9KaNcl/756QdH6/ejWLV4Nq48aNkqTzzz9fDzzwgM4///yU4wDQF9u3aSorK7V+/Xo98sgj2r9/v2655RYdP35cc+fOlSTdeOONKQtcFy5cqO3bt+tnP/uZDhw4oHvvvVcvvviiFixYkLlRwBgVFdLmzdLYsanHo9Hk8YoKb+JCdrW3t+vAgQOaPn26XnvtNc2fP1+vvfaapk+frgMHDvS4fQMAZ7L1NI2UfFT3vffe0z333KOmpiZNmjRJ27dv71qkeuTIka6PZyVpypQpevTRR3XXXXfpjjvu0IQJE7R161Z95jOfydwoYJSKCmnGjORTM0ePJteIlJfziUiQ5efnq6mpSSNHjlTonx+DnXfeeaqrq9OHH37YY2ErAJzJ9j4jXmCfEQAA/Cfd928jn6YBAAC5g2QEAAB4imQEAAB4imQEAAB4imQEAAB4imQEAAB4imQEAAB4imQEAAB4imQEAAB4yhd7NHduEtva2upxJAAAIF2d79tn2+zdF8nIsWPHJEmxWMzjSAAAgF3Hjh3T8OHD+/y5L2rTdHR06J133tGwYcO6inBlQmtrq2KxmBoaGqh5k0XMs3uYa3cwz+5gnt2RzXm2LEvHjh3TmDFjUorodueLT0by8vIUjUaz9vsLCwv5D90FzLN7mGt3MM/uYJ7dka157u8TkU4sYAUAAJ4iGQEAAJ7K6WSkoKBAS5YsUUFBgdehBBrz7B7m2h3MszuYZ3eYMM++WMAKAACCK6c/GQEAAN4jGQEAAJ4iGQEAAJ4iGQEAAJ4KfDKybt06jR8/XoMHD1ZpaaleeOGFfts//vjjuvjiizV48GBdeuml2rZtm0uR+pudeV6/fr3Ky8s1cuRIjRw5UlOnTj3rdcHH7P433WnDhg0KhUKaOXNmdgMMCLvz/NFHH2n+/PkqLi5WQUGBLrzwQv5+pMHuPK9evVoXXXSRhgwZolgspttuu00nT550KVp/+tOf/qTp06drzJgxCoVC2rp161nP2blzpz73uc+poKBAn/rUp/Twww9nN0grwDZs2GBFIhHroYcesl577TXru9/9rjVixAirubm51/Z//vOfrXA4bK1YscLat2+fddddd1mDBg2yXn31VZcj9xe783zDDTdY69ats15++WVr//791k033WQNHz7cevvtt12O3H/sznWnw4cPW2PHjrXKy8utGTNmuBOsj9md51OnTllXXHGFde2111rPPvusdfjwYWvnzp3W3r17XY7cX+zO869//WuroKDA+vWvf20dPnzYeuqpp6zi4mLrtttuczlyf9m2bZt15513WrW1tZYk64knnui3/aFDh6yhQ4dalZWV1r59+6y1a9da4XDY2r59e9ZiDHQyMnnyZGv+/Pld3ycSCWvMmDHWsmXLem1/3XXXWV/96ldTjpWWllr/8R//kdU4/c7uPHfX3t5uDRs2zHrkkUeyFWJgOJnr9vZ2a8qUKdYvfvELa86cOSQjabA7zz//+c+tT37yk1Y8HncrxECwO8/z58+3/vVf/zXlWGVlpfWFL3whq3EGSTrJSHV1tfXpT3865dj1119vTZs2LWtxBfY2TTwe1549ezR16tSuY3l5eZo6dap2797d6zm7d+9OaS9J06ZN67M9nM1zd21tbTp9+rTOPffcbIUZCE7n+oc//KEuuOACffvb33YjTN9zMs+/+c1vVFZWpvnz56uoqEif+cxntHTpUiUSCbfC9h0n8zxlyhTt2bOn61bOoUOHtG3bNl177bWuxJwrvHgv9EWhPCfef/99JRIJFRUVpRwvKirSgQMHej2nqamp1/ZNTU1Zi9PvnMxzd7fffrvGjBnT4z9+pHIy188++6x++ctfau/evS5EGAxO5vnQoUP6wx/+oG9+85vatm2b3nzzTc2bN0+nT5/WkiVL3Ajbd5zM8w033KD3339fX/ziF2VZltrb2/W9731Pd9xxhxsh54y+3gtbW1t14sQJDRkyJON9BvaTEfjD8uXLtWHDBj3xxBMaPHiw1+EEyrFjxzR79mytX79eo0aN8jqcQOvo6NAFF1yg//7v/9bll1+u66+/XnfeeacefPBBr0MLlJ07d2rp0qWqqanRSy+9pNraWj355JO6//77vQ4NAxTYT0ZGjRqlcDis5ubmlOPNzc0aPXp0r+eMHj3aVns4m+dOP/3pT7V8+XL9/ve/12WXXZbNMAPB7lzX19frrbfe0vTp07uOdXR0SJLy8/N18OBBlZSUZDdoH3Ly33RxcbEGDRqkcDjcdeySSy5RU1OT4vG4IpFIVmP2IyfzfPfdd2v27Nn6zne+I0m69NJLdfz4cd1888268847lZfH/19nQl/vhYWFhVn5VEQK8CcjkUhEl19+uXbs2NF1rKOjQzt27FBZWVmv55SVlaW0l6Snn366z/ZwNs+StGLFCt1///3avn27rrjiCjdC9T27c33xxRfr1Vdf1d69e7u+/v3f/11XX3219u7dq1gs5mb4vuHkv+kvfOELevPNN7uSPUl6/fXXVVxcTCLSByfz3NbW1iPh6EwALcqsZYwn74VZWxprgA0bNlgFBQXWww8/bO3bt8+6+eabrREjRlhNTU2WZVnW7NmzrUWLFnW1//Of/2zl5+dbP/3pT639+/dbS5Ys4dHeNNid5+XLl1uRSMTavHmzdfTo0a6vY8eOeTUE37A7193xNE167M7zkSNHrGHDhlkLFiywDh48aP32t7+1LrjgAutHP/qRV0PwBbvzvGTJEmvYsGHWY489Zh06dMj63e9+Z5WUlFjXXXedV0PwhWPHjlkvv/yy9fLLL1uSrFWrVlkvv/yy9be//c2yLMtatGiRNXv27K72nY/2VlVVWfv377fWrVvHo70DtXbtWmvcuHFWJBKxJk+ebD3//PNdP7vqqqusOXPmpLTftGmTdeGFF1qRSMT69Kc/bT355JMuR+xPdub5E5/4hCWpx9eSJUvcD9yH7P43fSaSkfTZnefnnnvOKi0ttQoKCqxPfvKT1o9//GOrvb3d5aj9x848nz592rr33nutkpISa/DgwVYsFrPmzZtnffjhh+4H7iN//OMfe/2b2zm3c+bMsa666qoe50yaNMmKRCLWJz/5SetXv/pVVmMMWRafbQEAAO8Eds0IAADwB5IRAADgKZIRAADgKZIRAADgKZIRAADgKZIRAADgKZIRAADgKZIRAADgKZIRAADgKZIRAADgKZIRAADgKZIRAADgqf8PLalzFR+bOfwAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}